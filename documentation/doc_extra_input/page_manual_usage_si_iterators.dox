/*! \page page_manual_usage_si_iterators Iterators
<p>Iterators are named "CONTAINERNAME_iterator". Iteration is done with only one function for better runtime performance. The iterators' constructor takes a handle to the host container.</p>

<p>Iterator script interface:</p>
\code{.cpp}
	template<typename T> class vector_iterator{
		//constructor
		vector_iterator(vector<T>@ host);
		//copy constructor
		vector_iterator(const vector_iterator &in other);
		
		T& current();
		
		bool next();
		bool opPostInc();//operator++, same thing as next, but with 71% less keypresses and 100% more operator overloading swag
	};
\endcode
<p>The "next" method evaluates iteration ending and advances the iterator.</p>
<p>The "map" and "unordered_map" containers' iterators can access both the key and value with the same iterator. Their iterators dont have a "current" method, instead they have "current_key" and "current_value". "current_key" returns const to preserve the container's ordering.</p>
\n
\par Examples
<p>Example of iterating through a vector:</p>
\code{.cpp}
	vector<int> cont;
	cont.push_back(1);
	cont.push_back(2);
	cont.push_back(3);
	for(vector_iterator<int> it(@cont);it++;){
		Print("content = "+it.current());
	}
\endcode
<p>Prints:</p>
\code{.cpp}
content = 1
content = 2
content = 3
\endcode
<p>Note how the third parameter of the for loop is empty.</p>
\n
<p>Example of iterating through a map:</p>
\code{.cpp}
	map<int,string> cont;
	cont.insert(2,"bb");
	cont.insert(1,"aa");
	cont.insert(3,"cc");
	for(map_iterator<int,string> it(@cont);it++;){
		Print("content = "+it.current_key()+" , "+it.current_value());
	}
\endcode
<p>Prints:</p>
\code{.cpp}
content = 1 , aa
content = 2 , bb
content = 3 , cc
\endcode
*/